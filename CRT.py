from sympy.ntheory.modular import solve_congruence
from gmpy2 import iroot

c1=int("93b2f23d212ad4fe2b8af2cf095accf51d40a49e228a46db124ee48951560755bb0947e49709fd7c323721b9c75a1a420baafd454e13c4c972a7aa6a6f30924e688ce9b661b104e6cf2b06cd38eefdd75f1dafa7bf37e41d1ced96b1d6a756cd8dd15e1b481266ebec5ab228562825e181513f35d1083d776cc805f748a280de",16)
c2=int("629A73AB9C2E984540C0E6E51F9B511102188360F1189703E14C6256AE337FEDC99586B270E6CAAF806AC834260E3C6ACBCD20BB4BC7AAACDA740A0E3063AFBD475C6DEAC370303C6C6FDCC7CC0E4F0EC2032D0EAD1A84A7955AA6E0299DD57043F6B056D00796F60F3249B2824247CCA68D70AA8F6E0693AF23AD8EDD95D627",16)
c3=int("78DF06A6E6A828630DF0E51E67FC0F4F7095BBE0B03FD1790901C2D167ADD01E08452A2E7F5E41C4120C18B0CDE3A23C38407BAF3452C23CECF6D2B63ED677A92931E435FA9F52D7762F31125AEEFEC7317DFC6D3B7124278825A54EF09CD1552A9FC22EE41D77FDF01FDF595DB808E55FD73EE62C11F83868A3942459276707",16)
c4=int("0DEE7FEACC216E79AF3E5A33014655912EF8A6B3B95F991E5440117C05E43AB23786CD3FC8960D4B33308A1E83050552D02160DEAB7495F2323ACF8F8BF0EB917D7EC848C07CA13F7DA00C7D70C7ABE53FF58F36D000F62954E029E5DEEA2BD376317CF67E31DFDD1FE8D8FDE422826BB0E6430C9653D5CE30FC1FBC127BB3EE",16)
c5=int("B68697D66DD835BAC0AFD070D47B7C04A31782FFFC24B312EAC3EE2BB9DD30B096CE73CDCFD1946689387A5C8A674CEFF98AC5D3E961DC1BC1A62D3FA91DBC891A350A7F44F24EAB9DA91A7AAC4198A18BC76F487C1DC5E4C99BF38434BE9C52CDB28B83E587E1D88A991260571D0923E2C30DEFA497ABD76D3B7A28166A7D80",16)

n1=int("00dea580ea11f1dcb7bbf60f288c3f8c74767f447480ff1b97d5b9a235fa151f54f94e86c0acf4bff7c95473df3ddfa7e8760cb084c0ef706bc8eb1b3a4f9d36b25cb6d399ba1d47bbee0e3b2a70c5869969fe83c19d2b41e316dc6c8bb81bba38a2bc9e00d3e29e4bc421293ea0f5cbea8595573c5731545f57d43742e0f86673",16)
n2=int("00a7d24265db87bf12d397acca8cea0b46a062e414ba0966f019aa598fcdf828708d66e7a95a50a6742e73e4f5e9094406ba797b031c228d5b754310ce69f09bdcadee50cd053c8da1c3032259434fbad35d236994ab1489def754635bbb3e61f4ac3e6b2c9a1092ebcbd363446c10c416d726b05ccb6495c9f3540764c7d5041f",16)
n3=int("00e50b7d1847bdb28e0e3f9b39884deb6d64a8a0e0eac3e4a27823a6e9f6487122d1ade8cc9f50b306636ffd5e1c37afb9ee31b3d2bb50da385223630103922aa21a0856f112ad51ea732ccac18b1315e6ac19e47e102d01ec64bada7a1a655b7de379fbbbcb4585cb38c534c04257cbeb3720d1f252162bfc828183bb5615fcdb",16)
n4=int("009c0964865917a807924837a815dba27a9f627005eafdc40c09364c99c66d8ee0d462b0a0f6ffeedb7a0a07c8d62eefbb0d5f8aa8610b319e23637f6127b088dba29863fe4d275d8b5c54d1c04ce5a7baf9c285d0c6fb47d2b3f5e7705fc7cf6ddf62ed92842959949015191dc7595aa4ec9af02b6fc55102f848f0190c3a3bf3",16)
n5=int("00c9ca19d889a8f868e5d27043f5b502a078ea6e400fbb0d79da036a28a564ea5e351d6b04c77faaab2b5c23667f40ec8cc24edadc051995b38613dc1ee0d479bb4e93a1d9cb22febca38a2fbff91671e0c152569790cdc6d4dd54630cb16976dee1d520fb9316183f43a9bce6889e4742705aebc78dbf094a296c1bbc84e60dd1",16)


def recover_message(c_list, n_list, e):
    """
    Recupera el mensaje m original a partir de c_i = m^e mod n_i usando el Teorema Chino del Resto (CRT).
    :param c_list: Lista de valores cifrados c_i
    :param n_list: Lista de m√≥dulos n_i
    :param e: Exponente p√∫blico
    :return: Mensaje original m
    """
    # Aplicamos el Teorema Chino del Resto (CRT)
    M, N = solve_congruence(*zip(c_list, n_list))
    
    if M is None:
        print("‚ùå No se pudo resolver el sistema con CRT.")
        return None
    
    print(f"‚úÖ M√≥dulo combinado (N) = {N}")
    print(f"‚úÖ Valor combinado de M = {M}")

    # Calculamos la ra√≠z e-√©sima de M
    m, exact = iroot(M, e)
    
    if not exact:
        print("‚ö†Ô∏è Advertencia: La ra√≠z no es exacta. El mensaje puede no ser correcto.")
    
    return int(m)


# üîπ Datos de entrada
c_values = [c1,c2,c3,c4,c5]

n_values = [n1,n2,n3,n4,n5]

e = 5  # Exponente p√∫blico

# üî• Recuperamos el mensaje original
m = recover_message(c_values, n_values, e)

# üìå Mostramos el resultado
print(f"\n‚úÖ El mensaje original es: {m}")

print(hex(m))
